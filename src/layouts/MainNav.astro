---
import "@fontsource/jersey-15";
import "@fontsource/kalam";
import ThemeToggle from "../components/ThemeToggle/ThemeToggle";
import {
  getLangFromUrl,
  getOriginalRouteFromUrl,
  useTranslatedPath,
  useTranslations,
} from "../i18n/utils";
import { getCollection } from "astro:content";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
const originalRoute = getOriginalRouteFromUrl(Astro.url);
const otherLang = lang === "fr" ? "en" : "fr";
const homeUrl = lang === "fr" ? `/${lang}` : "/";
const otherLangUrl = lang === "en" ? "fr" : "/";

const services = (await getCollection("services"))
  .filter(({ slug }) => slug.startsWith(`${lang}/`))
  .map((service) => ({
    ...service,
    slug: (() => {
      const [_, ...slug] = service.slug.split("/");
      return (lang !== "en" ? `/${lang}` : "") + "/services/" + slug.join("/");
    })(),
  }));

const isSameRoute = (url: string) =>
  Astro.url.pathname.replace(/^\//, "") === url.replace(/^\//, "");

const routeBasedClasses = (url: string, catchAll: boolean = false) => {
  let r = Astro.url.pathname
    .replace(/^\//, "")
    .replace(new RegExp(`^${lang}\/?`), "");
  let u = (url || "").replace(/^\//, "").replace(new RegExp(`^${lang}\/?`), "");

  if (catchAll && u.startsWith(u) && r.startsWith(u)) {
    r = "services";
    u = "services";
  }

  const isRoute = r === u || isSameRoute(url);

  const shared = [
    "focus:bg-gray-100",
    "focus:text-blue-700",
    "dark:focus:bg-blue-300",
    "dark:focus:text-blue-800",
    "md:bg-transparent",
    "md:hover:bg-transparent",
    "md:focus:bg-transparent",
    "md:focus:text-blue-700",
    "md:dark:bg-transparent",
    "md:dark:focus:bg-transparent",
    "md:dark:focus:text-blue-300",
    "md:dark:hover:bg-transparent",
  ];

  if (isRoute) {
    return [
      "bg-blue-700",
      "text-white",
      "focus:bg-blue-700",
      "focus:text-white",
      "dark:bg-blue-300",
      "dark:text-blue-800",
      "md:text-blue-700",
      "md:dark:text-blue-300",
      ...shared,
    ];
  }

  return [
    "text-gray-900",
    "hover:bg-gray-100",
    "hover:text-blue-700",
    "dark:text-white",
    "dark:hover:bg-gray-700",
    "md:hover:text-blue-700",
    "md:dark:hover:text-blue-300",
    ...shared,
  ];
};
---

<header>
  <nav
    class:list={[
      "bg-slate-100",
      "border-gray-200",
      "px-4",
      "lg:px-6",
      "py-2.5",
      "dark:text-white",
      "dark:bg-gray-800",
    ]}
  >
    <div
      class:list={[
        "flex",
        "flex-wrap",
        "justify-between",
        "items-center",
        "mx-auto",
        "max-w-screen-lg",
      ]}
    >
      <a
        href={homeUrl}
        class:list={["grid", "grid-flow-col", "items-center", "gap-2"]}
      >
        <span class:list={["text-4xl", "font-['Jersey_15']"]}>k11e</span>
        <small class:list={["font-['Kalam']", "pl-2", "pt-2", "leading-[80%]"]}>
          <p>/ Keven Lefebvre</p>
          <p class:list={["pl-2", "text-[60%]"]}>{t("nav.title")}</p>
        </small>
      </a>
      <div class:list={["flex", "items-center", "gap-1", "md:order-2"]}>
        <a
          href={originalRoute
            ? translatePath(originalRoute, otherLang)
            : otherLangUrl}
          class:list={[
            "block",
            "py-2",
            "px-3",
            "text-sm",
            "text-gray-500",
            "rounded-lg",
            "hover:bg-blue-100",
            "hover:text-blue-700",
            "dark:text-gray-400",
            "dark:hover:bg-gray-700",
          ]}
        >
          {lang === "fr" ? "EN" : "FR"}
        </a>
        <ThemeToggle client:only="react" />
        <button
          data-collapse-toggle="navbar-dropdown"
          type="button"
          class:list={[
            "inline-flex",
            "items-center",
            "p-2",
            "w-10",
            "h-10",
            "justify-center",
            "text-sm",
            "text-gray-500",
            "rounded-lg",
            "hover:bg-blue-100",
            "hover:text-blue-700",
            "md:hidden",
            "hover:bg-gray-100",
            "dark:text-gray-400",
            "dark:hover:bg-gray-700",
          ]}
          aria-controls="navbar-dropdown"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <svg
            class="h-6 w-6"
            fill="currentColor"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
            ><path
              fill-rule="evenodd"
              d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
              clip-rule="evenodd"></path></svg
          >
          <svg
            class="hidden h-6 w-6"
            fill="currentColor"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
            ><path
              fill-rule="evenodd"
              d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
              clip-rule="evenodd"></path></svg
          >
        </button>
      </div>
      <div
        class:list={["hidden", "w-full", "md:block", "md:w-auto"]}
        id="navbar-dropdown"
      >
        <ul
          class:list={[
            "mt-4",
            "flex",
            "flex-col",
            "rounded-lg",
            "border",
            "border-gray-100",
            "bg-gray-50",
            "p-4",
            "font-medium",
            "dark:border-gray-700",
            "dark:bg-gray-800",
            "md:mt-0",
            "md:flex-row",
            "md:space-x-8",
            "md:border-0",
            "md:bg-transparent",
            "md:p-0",
            "rtl:space-x-reverse",
          ]}
        >
          <li>
            <a
              href={homeUrl}
              class:list={[
                "block",
                "rounded",
                "px-3",
                "py-2",
                "md:p-0",
                routeBasedClasses(homeUrl),
              ]}
              aria-current="page">{t("nav.home")}</a
            >
          </li>
          <li>
            <button
              id="dropdownNavbarLink"
              data-dropdown-toggle="dropdownNavbar"
              class:list={[
                "flex",
                "w-full",
                "items-center",
                "justify-between",
                "rounded",
                "px-3",
                "py-2",
                "md:w-auto",
                "md:border-0",
                "md:p-0",
                routeBasedClasses(translatePath("services"), true),
              ]}
              >{t("nav.services")}
              <svg
                class="ms-2.5 mt-1 h-2.5 w-2.5"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 10 6"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="m1 1 4 4 4-4"></path>
              </svg></button
            >
            <!-- Dropdown menu -->
            <div
              id="dropdownNavbar"
              class:list={[
                "z-10",
                "hidden",
                "w-44",
                "divide-y",
                "divide-gray-100",
                "rounded-lg",
                "bg-white",
                "font-normal",
                "shadow",
                "dark:divide-gray-600",
                "dark:bg-gray-700",
              ]}
            >
              <ul
                class:list={[
                  "py-2",
                  "text-sm",
                  "text-gray-700",
                  "dark:text-gray-400",
                ]}
                aria-labelledby="dropdownLargeButton"
              >
                {
                  services.map((service) => {
                    const isRoute = isSameRoute(service.slug);
                    return (
                      <li>
                        <a
                          href={service.slug}
                          class:list={[
                            "block",
                            "px-4",
                            "py-2",
                            "hover:bg-gray-100",
                            "dark:hover:bg-gray-600",
                            "dark:hover:text-white",
                            {
                              "text-blue-700": isRoute,
                              "dark:text-blue-300": isRoute,
                            },
                          ]}
                        >
                          {service.data.marketingTitle}
                        </a>
                      </li>
                    );
                  })
                }
              </ul>
            </div>
          </li>
          <li>
            <a
              href={translatePath("about-me")}
              class:list={[
                "block",
                "rounded",
                "px-3",
                "py-2",
                "md:p-0",
                routeBasedClasses(translatePath("about-me")),
              ]}>{t("nav.about")}</a
            >
          </li>
          <li>
            <a
              href={translatePath("contact")}
              class:list={[
                "block",
                "rounded",
                "px-3",
                "py-2",
                "md:p-0",
                routeBasedClasses("invalid"),
              ]}>Contact</a
            >
          </li>
        </ul>
      </div>
    </div>
  </nav>
</header>
